name: ci

on:
  pull_request:
  push:
    branches: [develop, main]
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    env:
      CODECOV_UPLOAD: true
      PIPX_VERSION: "0.16.4"
      POETRY_VERSION: "1.1.11"
      PYPI_PUBLISH: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Poetry cache for Python dependencies
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Set up pre-commit cache
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: ${{ runner.os }}-pre-commit-
      - name: Install pipx for Python ${{ matrix.python-version }}
        run: python -m pip install "pipx==$PIPX_VERSION"
      - name: Install Poetry
        run: pipx install "poetry==$POETRY_VERSION"
      - name: Test Poetry version
        run: |
          POETRY_VERSION_INSTALLED=$(poetry -V)
          echo "The POETRY_VERSION environment variable is set to $POETRY_VERSION."
          echo "The installed Poetry version is $POETRY_VERSION_INSTALLED."
          case $POETRY_VERSION_INSTALLED in
          *$POETRY_VERSION*) echo "Poetry version correct." ;;
          *) echo "Poetry version incorrect." && exit 1 ;;
          esac
      - name: Install dependencies
        run: poetry install --no-interaction -E all
      - name: Test virtualenv location
        run: |
          EXPECTED_VIRTUALENV_PATH=${{ github.workspace }}/.venv
          INSTALLED_VIRTUALENV_PATH=$(poetry env info --path)
          echo "The virtualenv should be at $EXPECTED_VIRTUALENV_PATH."
          echo "Poetry is using a virtualenv at $INSTALLED_VIRTUALENV_PATH."
          case "$INSTALLED_VIRTUALENV_PATH" in
          "$EXPECTED_VIRTUALENV_PATH") echo "Correct Poetry virtualenv." ;;
          *) echo "Incorrect Poetry virtualenv." && exit 1 ;;
          esac
      - name: Run pre-commit hooks
        run: poetry run pre-commit run --all-files
      - name: Run unit tests
        run: |
          poetry run pytest \
            --deselect tests/test_cloud.py::TestCloudClientIntegration \
            --cov-report=xml:coverage-unit.xml
        timeout-minutes: 5
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_S3_BUCKET_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          role-duration-seconds: 1200
      - name: Run integration tests
        run: |
          poetry run pytest \
            tests/test_cloud.py::TestCloudClientIntegration \
            --cov-report=xml:coverage-integration.xml \
            --durations=0
        timeout-minutes: 5
        env:
          AWS_IAM_ACCESS_KEY_FASTENV: ${{ secrets.AWS_IAM_ACCESS_KEY_FASTENV }}
          AWS_IAM_ACCESS_KEY_SESSION: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_IAM_SECRET_KEY_FASTENV: ${{ secrets.AWS_IAM_SECRET_KEY_FASTENV }}
          AWS_IAM_SECRET_KEY_SESSION: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_IAM_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
          AWS_S3_BUCKET_HOST: ${{ secrets.AWS_S3_BUCKET_HOST }}
          BACKBLAZE_B2_ACCESS_KEY_FASTENV: ${{ secrets.BACKBLAZE_B2_ACCESS_KEY_FASTENV }}
          BACKBLAZE_B2_BUCKET_HOST: ${{ secrets.BACKBLAZE_B2_BUCKET_HOST }}
          BACKBLAZE_B2_BUCKET_REGION: ${{ secrets.BACKBLAZE_B2_BUCKET_REGION }}
          BACKBLAZE_B2_SECRET_KEY_FASTENV: ${{ secrets.BACKBLAZE_B2_SECRET_KEY_FASTENV }}
      - name: Upload unit test coverage report to Codecov
        uses: codecov/codecov-action@v2
        if: env.CODECOV_UPLOAD == 'true' && matrix.python-version == '3.10'
        with:
          fail_ci_if_error: true
          files: coverage-unit.xml
          flags: unit
      - name: Upload integration test coverage report to Codecov
        uses: codecov/codecov-action@v2
        if: env.CODECOV_UPLOAD == 'true' && matrix.python-version == '3.10'
        with:
          fail_ci_if_error: true
          files: coverage-integration.xml
          flags: integration
      - name: Build Python package with latest stable Python version and publish to PyPI
        if: >
          env.PYPI_PUBLISH == 'true' &&
          matrix.python-version == '3.10' &&
          startsWith(github.ref, 'refs/tags/')
        run: |
          PACKAGE_VERSION=$(poetry version -s)
          GIT_TAG_VERSION=$(echo ${{ github.ref }} | cut -d / -f 3)
          echo "The Python package version is $PACKAGE_VERSION."
          echo "The Git tag version is $GIT_TAG_VERSION."
          if [ "$PACKAGE_VERSION" = "$GIT_TAG_VERSION" ]; then
            echo "Versions match."
          else
            echo "Versions do not match." && exit 1
          fi
          poetry publish --build -u __token__ -p ${{ secrets.PYPI_TOKEN }}
